// Generated by LiveScript 1.2.0
(function(){
  var util, A, MessageSeq, Message, ID, String, KeyValue;
  util = require('util');
  A = {
    msgSeq: function(msgs){
      return new A.MessageSeq(msgs);
    },
    msg: function(id, args){
      return new A.Message(id, args);
    },
    str: function(str){
      return new A.String(str);
    },
    id: function(id){
      return new A.ID(id);
    },
    kv: function(key, value){
      return new A.KeyValue(key, value);
    }
  };
  A.MessageSeq = MessageSeq = (function(){
    MessageSeq.displayName = 'MessageSeq';
    var prototype = MessageSeq.prototype, constructor = MessageSeq;
    function MessageSeq(msgs){
      this.msgs = msgs != null
        ? msgs
        : [];
      if (!(this.msgs instanceof Array)) {
        throw new Error('Non-array messages');
      }
    }
    prototype.inspect = function(){
      return "{ " + this.msgs.map(function(it){
        return util.inspect(it);
      }).join(' ') + " }";
    };
    return MessageSeq;
  }());
  A.Message = Message = (function(){
    Message.displayName = 'Message';
    var prototype = Message.prototype, constructor = Message;
    function Message(id, args){
      this.id = id;
      this.args = args != null
        ? args
        : [];
    }
    prototype.inspect = function(){
      var str;
      str = util.inspect(this.id) + "";
      if (this.args.length > 0) {
        str += "(" + this.args.map(function(it){
          return util.inspect(it);
        }).join(', ') + ")";
      }
      return str;
    };
    return Message;
  }());
  A.ID = ID = (function(){
    ID.displayName = 'ID';
    var prototype = ID.prototype, constructor = ID;
    function ID(data){
      this.data = data;
    }
    prototype.inspect = function(){
      return this.data;
    };
    return ID;
  }());
  A.String = String = (function(){
    String.displayName = 'String';
    var prototype = String.prototype, constructor = String;
    function String(data){
      this.data = data;
    }
    prototype.inspect = function(){
      return util.inspect(this.data);
    };
    return String;
  }());
  A.KeyValue = KeyValue = (function(){
    KeyValue.displayName = 'KeyValue';
    var prototype = KeyValue.prototype, constructor = KeyValue;
    function KeyValue(key, value){
      this.key = key;
      this.value = value;
    }
    prototype.inspect = function(){
      return util.inspect(this.key) + " = " + util.inspect(this.value);
    };
    return KeyValue;
  }());
  module.exports = A;
}).call(this);
