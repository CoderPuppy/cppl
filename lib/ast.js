// Generated by LiveScript 1.2.0
(function(){
  var U, P, util, A, MsgSeq, Msg, Comment, slice$ = [].slice;
  U = require('./userdata');
  P = require('./primitives');
  util = require('util');
  A = exports;
  A.MsgSeq = MsgSeq = (function(superclass){
    var prototype = extend$((import$(MsgSeq, superclass).displayName = 'MsgSeq', MsgSeq), superclass).prototype, constructor = MsgSeq;
    function MsgSeq(){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.msgs = slice$.call(arguments);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.add = function(msg){
      this.msgs.push(msg);
      return this;
    };
    prototype.inspect = function(){
      return '{ ' + this.msgs.map(partialize$.apply(util, [util.inspect, [void 8], [0]])).join(' ') + ' }';
    };
    prototype.toCode = function(){
      return this.msgs.map(function(it){
        return it.toCode();
      }).join(' ');
    };
    prototype.dup = function(){
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(constructor, this.msgs.map(function(it){
        return it.dup();
      }), function(){});
    };
    return MsgSeq;
  }(U.UserData));
  A.msgSeq = MsgSeq;
  A.Msg = Msg = (function(superclass){
    var prototype = extend$((import$(Msg, superclass).displayName = 'Msg', Msg), superclass).prototype, constructor = Msg;
    function Msg(id, args, pos){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.id = id;
      this$.args = args != null
        ? args
        : [];
      this$.pos = pos != null
        ? pos
        : {
          chunk: '<runtime>',
          line: 1,
          column: 1,
          char: 1
        };
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.inspect = function(){
      var str;
      str = util.inspect(this.id, {
        colors: true
      }) + '(' + util.inspect(this.args, {
        colors: true
      }) + ')';
      if (this.pos != null) {
        str += " at " + this.pos.chunk + ":" + this.pos.line + ":" + this.pos.column;
      }
      return str;
    };
    prototype.toCode = function(){
      var str;
      str = this.id.toCode();
      if (str === '()') {
        str = '';
      }
      if (this.args.length > 0) {
        str += '(' + this.args.map(function(it){
          return it.toCode();
        }).join(', ') + ')';
      }
      return str;
    };
    prototype.dup = function(){
      return new constructor(this.id.dup(), this.args.map(function(it){
        return it.dup();
      }), import$({}, this.pos));
    };
    return Msg;
  }(U.UserData));
  A.msg = Msg;
  A.Comment = Comment = (function(superclass){
    var prototype = extend$((import$(Comment, superclass).displayName = 'Comment', Comment), superclass).prototype, constructor = Comment;
    function Comment(contents, multiline){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.contents = contents;
      this$.multiline = multiline != null ? multiline : true;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.inspect = function(){
      if (this.multiline) {
        return "/#" + this.contents + "#/";
      } else {
        return "#" + this.contents;
      }
    };
    prototype.toCode = function(){
      return this.inspect();
    };
    return Comment;
  }(U.UserData));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function partialize$(f, args, where){
    var context = this;
    return function(){
      var params = slice$.call(arguments), i,
          len = params.length, wlen = where.length,
          ta = args ? args.concat() : [], tw = where ? where.concat() : [];
      for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
      return len < wlen && len ?
        partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
    };
  }
}).call(this);
