// Generated by LiveScript 1.2.0
(function(){
  var A, P, util, transformer;
  A = require('../ast');
  P = require('../primitives');
  util = require('util');
  transformer = function(seq, transformers){
    var path, seg, obj, i$, len$, transformer;
    seq = seq.dup();
    path = [{
      obj: seq,
      arr: seq.msgs,
      index: 0
    }];
    objs: while (path.length) {
      seg = path[path.length - 1];
      if (seg.index >= seg.arr.length) {
        path.pop();
        seg = path[path.length - 1];
        if (seg != null) {
          seg.index += 1;
        }
      } else {
        obj = seg.arr[seg.index];
        if (obj instanceof A.Msg) {
          for (i$ = 0, len$ = transformers.length; i$ < len$; ++i$) {
            transformer = transformers[i$];
            transformer(obj, seg, path);
            seg = path[path.length - 1];
            obj = seg.arr[seg.index];
            if (!(obj instanceof A.Msg)) {
              continue objs;
            }
          }
          path.push({
            obj: obj,
            arr: obj.args,
            index: 0
          });
        } else if (obj instanceof A.MsgSeq) {
          path.push({
            obj: obj,
            arr: obj.msgs,
            index: 0
          });
        } else {
          throw new Error('what is this? ' + util.inspect(old) + ' in an array');
        }
      }
    }
    return seq;
  };
  transformer.str = function(){
    return function(msg, seg, path){
      var id, numStrs, parts, last, quote, strStart, prev, i$, len$, i, char;
      if (msg.id instanceof P.Symbol) {
        id = msg.id.val;
        numStrs = 0;
        parts = [];
        last = 0;
        for (i$ = 0, len$ = id.length; i$ < len$; ++i$) {
          i = i$;
          char = id[i$];
          if (prev !== '\\' && (quote === char || (!quote && (char === '\'' || char === '"')))) {
            if (quote != null) {
              numStrs += 1;
              last = i + 1;
              parts.push(id.substring(strStart + 1, i));
              quote = null;
              strStart = void 8;
            } else {
              parts.push(id.substring(last, i));
              strStart = i;
              quote = char;
            }
          }
          prev = char;
        }
        parts.push(id.substr(last));
        id = parts.join('');
        if (parts.length === 2 && numStrs === 1) {
          return msg.id = P.str(id);
        } else {
          return msg.id.val = id;
        }
      }
    };
  };
  module.exports = transformer;
}).call(this);
