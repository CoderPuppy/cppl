// Generated by LiveScript 1.2.0
(function(){
  var conditions, handlers, StackFrame, Stack, ConditionError, slice$ = [].slice;
  conditions = exports;
  handlers = [];
  conditions['catch'] = function(handler, blk){
    var e;
    try {
      return blk();
    } catch (e$) {
      e = e$;
      if (e instanceof conditions.ConditionError) {
        return handler(e.condition);
      } else {
        throw e;
      }
    }
  };
  conditions.handle = function(handler, blk){
    handlers.push(handler);
    blk();
    return handlers.pop();
  };
  conditions.StackFrame = StackFrame = (function(){
    StackFrame.displayName = 'StackFrame';
    var prototype = StackFrame.prototype, constructor = StackFrame;
    function StackFrame(seq, msg){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.seq = seq;
      this$.msg = msg;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.dup = function(){
      return new constructor(this.seq.dup(), this.msg.dup());
    };
    return StackFrame;
  }());
  conditions.Stack = Stack = (function(){
    Stack.displayName = 'Stack';
    var prototype = Stack.prototype, constructor = Stack;
    function Stack(){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.frames = slice$.call(arguments);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.dup = function(){
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(constructor, [].concat(this.frames), function(){});
    };
    return Stack;
  }());
  conditions.stack = new conditions.Stack;
  conditions.ConditionError = ConditionError = (function(superclass){
    var prototype = extend$((import$(ConditionError, superclass).displayName = 'ConditionError', ConditionError), superclass).prototype, constructor = ConditionError;
    function ConditionError(condition){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.condition = condition;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    return ConditionError;
  }(Error));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
