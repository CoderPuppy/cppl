// Generated by LiveScript 1.2.0
(function(){
  var U, util, P, Symbol, String;
  U = require('./userdata');
  util = require('util');
  P = exports;
  P.Symbol = Symbol = (function(superclass){
    var prototype = extend$((import$(Symbol, superclass).displayName = 'Symbol', Symbol), superclass).prototype, constructor = Symbol;
    function Symbol(val){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.val = val;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.id = function(){
      return ':' + this.val;
    };
    prototype.inspect = function(){
      return ":" + util.inspect(this.val, {
        colors: true
      });
    };
    prototype.toCode = function(){
      return this.val;
    };
    prototype.dup = function(){
      return new constructor(this.val);
    };
    return Symbol;
  }(U.UserData));
  P.symbol = P.Symbol;
  P.sym = P.Symbol;
  P.String = String = (function(superclass){
    var prototype = extend$((import$(String, superclass).displayName = 'String', String), superclass).prototype, constructor = String;
    function String(val){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.val = val;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.id = function(){
      return 's' + this.val;
    };
    prototype.inspect = function(){
      return util.inspect(this.val, {
        colors: true
      });
    };
    prototype.toCode = function(){
      return JSON.serialize(this.val);
    };
    return String;
  }(U.UserData));
  P.string = P.String;
  P.str = P.String;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
