// Generated by LiveScript 1.2.0
(function(){
  var A, P, util, Parser;
  A = require('./ast');
  P = require('./primitives');
  util = require('util');
  Parser = (function(){
    Parser.displayName = 'Parser';
    var prototype = Parser.prototype, constructor = Parser;
    function Parser(chunkName){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      chunkName == null && (chunkName = '<runtime>');
      this$.str = '';
      this$.seq = new A.MsgSeq;
      this$.path = [this$.seq];
      this$.current = this$.seq;
      this$.prev = '';
      this$.pos = {
        char: 1,
        column: 1,
        line: 1,
        chunk: chunkName
      };
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.add = function(str){
      return this.str += str;
    };
    prototype._lastOf = function(kind, barrier){
      var i$, i;
      for (i$ = this.path.length - 1; i$ >= 0; --i$) {
        i = i$;
        if (this.path[i] === barrier || (typeof barrier === 'function' && this.path[i] instanceof barrier)) {
          break;
        }
        if (this.path[i] === kind || (typeof kind === 'function' && this.path[i] instanceof kind)) {
          return this.path[i];
        }
      }
    };
    prototype._push = function(o){
      this.path.push(o);
      this.current = o;
      return o;
    };
    prototype._popToLastOf = function(kind){
      var i$, i;
      for (i$ = this.path.length - 1; i$ >= 0; --i$) {
        i = i$;
        if (this.path[i] === kind || (typeof kind === 'function' && this.path[i] instanceof kind)) {
          return this.path[i];
        }
        this._pop();
      }
    };
    prototype._pop = function(){
      this.path.pop();
      return this.current = this.path[this.path.length - 1];
    };
    prototype._pullChar = function(){
      this.pos.char += 1;
      this.pos.column += 1;
      if (this.str[0] === '\n' || this.str[0] === '\r') {
        this.pos.column = 0;
        this.pos.line += 1;
      }
      this.prev = this.str[0];
      return this.str = this.str.substr(1);
    };
    prototype._reprocessChar = function(){
      this.str = ' ' + this.str;
      this.pos.char -= 1;
      return this.pos.column -= 1;
    };
    prototype.parse = function(){
      var seq, id, msg, results$ = [];
      while (this.str.length > 0) {
        if (this.current instanceof A.Comment) {
          if (this.current.multiline && this.str.substr(0, 2) === '#/') {
            this._pullChar();
            this._pop();
          } else if (!this.current.multiline && (this.str[0] === '\n' || this.str[0] === '\r')) {
            this._pop();
          } else {
            this.current.contents += this.str[0];
          }
        } else if (this.str[0] === '#') {
          this._push(A.Comment('', false));
        } else if (this.str.substr(0, 2) === '/#') {
          this._push(A.Comment(''));
          this._pullChar();
        } else if (Array.isArray(this.current)) {
          this._reprocessChar();
          seq = A.msgSeq();
          this.current.push(seq);
          this._push(seq);
        } else if ((this.current instanceof P.Symbol || this.current instanceof A.MsgSeq) && this._lastOf(A.MsgSeq) != null && (this.prev[0] === '\\' || this.strQuote === this.str[0] || this.strQuote != null || !/^[ \t\n\r\(\)\[\]]/.test(this.str[0]))) {
          if (!(this.current instanceof P.Symbol)) {
            id = P.sym('');
            msg = A.msg(id, [], import$({}, this.pos));
            this._push(msg);
            this._push(id);
            this._lastOf(A.MsgSeq).add(msg);
          }
          this.current.val += this.str[0];
          if (this.strQuote === this.str[0] && this.prev[0] !== '\\') {
            delete this.strQuote;
          } else if (this.str[0] === '"' || this.str[0] === '\'') {
            this.strQuote = this.str[0];
          }
        } else if ((this.str[0] === ' ' || this.str[0] === '\t') && this._lastOf(A.MsgSeq) != null) {
          this._popToLastOf(A.MsgSeq);
        } else if (this.str[0] === '(' && this._lastOf(A.Msg) != null) {
          this._push(this._popToLastOf(A.Msg).args);
        } else if (this.str[0] === '(' && this._lastOf(A.MsgSeq) != null) {
          msg = A.msg(P.sym('()'), [], import$({}, this.pos));
          this._lastOf(A.MsgSeq).add(msg);
          this._push(this._push(msg).args);
        } else if (this.str[0] === ')' && this._lastOf(Array) != null) {
          this._popToLastOf(Array);
          this._pop();
          this._pop();
        } else if (this.str[0] === ',' && this._lastOf(Array) != null) {
          this._popToLastOf(Array);
        } else if ((this.str[0] === '\n' || this.str[0] === '\r') && this.current instanceof A.MsgSeq) {
          this.current.add(A.msg(P.sym('.'), [], import$({}, this.pos)));
        } else {
          throw new Error("Unexpected '" + this.str[0] + "' at line " + this.pos.line + ", column " + this.pos.column + " (char " + this.pos.char + ")");
        }
        results$.push(this._pullChar());
      }
      return results$;
    };
    return Parser;
  }());
  module.exports = Parser;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
